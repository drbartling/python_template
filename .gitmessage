
# <type<!>>: <Subject> # 52-char limit ############
# 72-character lines for description ###################################

# Why:

# Related Issues:

# References:

# Run `git config commit.template .gitmessage`
# Use `git commit` when committing files, and this template will be
# used.

# Example commit message:
# chore: Add commit message template

# Capitalize subject line
# Write capitalized imperative statement with no period for subject
# List details of significant changes below the subject line
# Write details as capitalized imperative statements
# Provide the below sections for further context

# Why:

# A short imperative subject helps when viewing the log, especially when
# viewing one-line formatted logs.  Clear writing of what changed helps
# give a clean understanding of context when reading blame messages and
# when looking at a specific commit.

# Related Issues:
# Link to related issue numbers (hyper link if applicable), e.g.:
# https://decatechnologies.atlassian.net/browse/ABC-123

# References:
# List relevant references e.g.:
# https://www.conventionalcommits.org/en/v1.0.0/
# https://chris.beams.io/posts/git-commit/
# http://karma-runner.github.io/3.0/dev/git-commit-msg.html

# type can be
# major
#    !        (Breaking change; used in conjuction with another type)
# minor
#    feat     (New user facing feature)
# patch
#    fix      (Fix to user facing code (not build or tests))
#    perf     (Improve performance with no other fix or feature)
#    refactor (refactoring production code)
#    style    (formatting, missing semi colons, etc; no code change)
# unversioned
#    build    (build related changes, including version number updates)
#    ci       (Updates for continuous integration and delivery)
#    docs     (changes to documentation, comments.  No logic change)
#    merge    (Merge commit message generated by git)
#    test     (adding or refactoring tests; no production code change)
